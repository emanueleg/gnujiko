<?php
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 HackTVT Project
 copyright(C) 2013 Alpatech mediaware - www.alpatech.it
 license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 Gnujiko 10.1 is free software released under GNU/GPL license
 developed by D. L. Alessandro (alessandro@alpatech.it)
 
 #DATE: 15-04-2013
 #PACKAGE: ftp-test
 #DESCRIPTION: Make some FTP test.
 #VERSION: 2.0beta
 #CHANGELOG: 
 #TODO: da completare le funzioni autocheck e autoset.
 
*/
function shell_ftptest($args, $sessid, $shellid=0)
{
 global $_BASE_PATH, $_USERS_HOMES, $_FTP_SERVER, $_FTP_USERNAME, $_FTP_PASSWORD, $_FTP_PATH, $_DEFAULT_FILE_PERMS;

 $out = "Gnujiko 10.1 - FTP Test 2.0beta\n";
 $outArr = array();

 $sessInfo = sessionInfo($sessid);
 if($sessInfo['uname'] != "root")
  return array("message"=>"You must be root!", "error"=>"YOU_MUST_BE_ROOT");

 for($c=0; $c < count($args); $c++)
  switch($args[$c])
  {
   case '-server' : {$_FTP_SERVER=$args[$c+1]; $c++;} break;
   case '-login' : case '-user' : case '-username' : {$_FTP_USERNAME=$args[$c+1]; $c++;} break;
   case '-passwd' : case '-password' : {$_FTP_PASSWORD=$args[$c+1]; $c++;} break;
   case '-path' : {$_FTP_PATH=$args[$c+1]; $c++;} break;

   case '--auto-check' : $autoCheck=true; break;
   case '--auto-set' : $autoSet=true; break;
  }

 if(!$_FTP_SERVER)
  $_FTP_SERVER = $_SERVER['SERVER_NAME'];

 
 /* CONNECTION */
 $out.= "Connecting to server ".$_FTP_SERVER."...";
 $conn = @ftp_connect($_FTP_SERVER);
 if(!$conn)
 {
  $out.= "failed!";
  return array('message'=>$out, 'error'=>"FTP_CONNECTION_FAILED");
 }
 $out.= "done!\n";
 
 
 /* LOGIN */
 $out.= "Login with user ".$_FTP_USERNAME."...";
 if(!@ftp_login($conn,$_FTP_USERNAME,$_FTP_PASSWORD))
 {
  $out.= "failed!\n Unable to connect. Login or password are wrong!\n";
  return array('message'=>$out, 'error'=>"FTP_LOGIN_FAILED");
 }
 $out.= "done!\n";

 if($_FTP_PATH)
 {
  $out.= "Change directory to ".$_FTP_PATH."...";
  if(!@ftp_chdir($conn, $_FTP_PATH))
  {
   $out.= "failed!\n";
   return array('message'=>$out, 'error'=>"FTP_CHDIR_FAILED");
  }
  $out.= "done!\n";
 }

 /* TEST MKDIR */
 $out.= "Test #1: Create temporary directory tmp/ftptest/ using FTP...";
 if(is_dir("tmp/ftptest/"))
 {
  if(@!ftp_rmdir($conn, "tmp/ftptest/"))
   $out.= "passed! The directory tmp/ftptest/ already exists but I can't remove it because is not empty!\n";
 }
 if(@!ftp_mkdir($conn, "tmp/ftptest/"))
 {
  $out.= "failed!";
  return array('message'=>$out, 'error'=>"FTP_MKDIR_TEST_FAILED");
 }
 $out.= "done!\n";

 /* TEST FILE */
 $out.= "Test #2: Create temporary file tmp/ftptest/test.txt...";

 $buffer = "Gnujiko 10.1 - FTP Test 2.0beta\n";
 $buffer.= "This file is autogenerated by command ftptest\n";

 $tempHandle = tmpfile();
 if(@!fwrite($tempHandle, $buffer))
 {
  $out.= "failed!\nUnknown error in creating temporary file using PHP function tmpfile()\n";
  return array('message'=>$out, 'error'=>"FTP_TMPFILE_FAILED");
 }
 @rewind($tempHandle);       
 if(!@ftp_fput($conn, "tmp/ftptest/test.txt", $tempHandle, FTP_BINARY))
 {
  $out.= "failed!\nUnable to create file test.txt into directory tmp/ftptest/\n";
  return array('message'=>$out, 'error'=>"FTP_PUT_FAILED");
 }
 $out.= "done!\n";

 /* CLEAN ALL */
 $out.= "Test #3: Clean all...";
 if(@!ftp_delete($conn, "tmp/ftptest/test.txt"))
 {
  $out.= "failed!\n Unable to remove temporary file tmp/ftptest/test.txt\n";
  return array('message'=>$out, 'error'=>"FTP_DELETE_FAILED");
 }
 if(@!ftp_rmdir($conn, "tmp/ftptest/"))
 {
  $out.= "failed!\n Unable to remove temporary directory tmp/ftptest/\n";
  return array('message'=>$out, 'error'=>"FTP_RMDIR_FAILED");
 }
 $out.= "done!\n";
 @ftp_close($conn);

 return array('message'=>$out, 'outarr'=>$outArr);
}

